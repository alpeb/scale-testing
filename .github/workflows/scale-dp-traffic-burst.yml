name: Scale Tests

on:
  push:
    branches:
    - main

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  dp-traffic-burst:
    name: Dataplane Traffic Burst in ARM
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [eks]
        arch: [x86, arm64]
        k8s-version: ['1.24']
        include:
        - initial-delay: 2m
          shutdown: false
          k6-parallelism: 10
    steps:
    - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
    - uses: ./.github/actions/install-eksctl
    - uses: ./.github/actions/cluster-name
      id: name
      with:
        arch: ${{ matrix.arch }}
    - name: Create Cluster
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        sed -e 's/\$NAME/${{ steps.name.outputs.NAME }}/' \
            -e 's/$K8S_VERSION/${{ matrix.k8s-version }}/' \
            .github/workflows/scale-config/${{ github.job }}/eks-x86-${{ matrix.arch }}.yml \
          | eksctl create cluster -f -
    - name: Install k6-operator
      run: |
        kubectl apply -f .github/workflows/scale-config/k6-operator.yml
    - name: Install Linkerd
      run: |
        linkerd install --crds | kubectl apply -f -
        linkerd install | kubectl apply -f -
        linkerd viz install -f .github/workflows/scale-config/viz-config.yml \
          | kubectl apply -f -
        linkerd check
        linkerd inject https://run.linkerd.io/emojivoto.yml | kubectl apply -f -
        kubectl -n emojivoto scale --replicas 0 deploy vote-bot
        kubectl -n emojivoto patch deployment web --type=json -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key":"SUT","operator":"Equal","value":"true","effect":"NoSchedule"}]}]'
        linkerd check --proxy -n emojivoto
    - name: Run Test
      run: |
        if [[ ${{ matrix.initial-delay}} ]]; then
          sleep ${{ matrix.initial-delay}}
        fi
        kubectl create cm scale-test --from-file \
          .github/workflows/scale-config/${{ github.job }}/k6-script.js
        sed -e 's/$PARALLELISM/${{ matrix.k6-parallelism }}/' \
            .github/workflows/scale-config/k6-config.yml \
          | kubectl apply -f -
    - name: Wait and Return Results
      run: |
        for ((i=1; i <= ${{ matrix.k6-parallelism }}; i++)); do
          kubectl wait --for=condition=complete job/scale-test-$i --timeout=-1s
          echo "RESULTS FOR job/scale-test-$i:"
          kubectl logs job/scale-test-$i
        done
    - name: Create Metrics Snapshot
      run: |
        kubectl -n linkerd-viz port-forward svc/prometheus 9090
        snapshot=$(curl -XPOST http://localhost:9090/api/v1/admin/tsdb/snapshot | jq .data.name|tr -d '"')
        pod=$(kubectl -n linkerd-viz get po -l component=prometheus -oname)
        name=${pod#"pod/"}
        kubectl -n linkerd-viz cp $name:/data/snapshots -c sidecar ./snapshots
        tar zcf snapshots.tar.tz snapshots/
    - name: Upload Metrics Snapshot
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      with:
        name: metrics-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.k8s-version }}.tar.gz
        path: ./snapshots.tar.gz
    - name: Tear Down Cluster
      if: ${{ always() }}
      run: |
        if [[ ${{ matrix.shutdown }} == "true" ]]; then
          eksctl delete cluster --name ${{ steps.name.outputs.NAME }}
        fi
