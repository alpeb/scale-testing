# Triggers two clusters in EKS, one with x86 nodes and another with an ARM64
# node, and performs a load test on an injected workload"
name: Dataplane Traffic Burst Test - EKS

on:
  push:
    branches:
    - eks

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  dp-traffic-burst:
    name: Dataplane Traffic Burst
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [eks]
        arch: [x86, arm64]
        k8s-version: ['1.24']
        linkerd-version: ['stable-2.14.0']
        initial-delay: [2m]
        shutdown: [false]
        k6-parallelism: [10]
    steps:
    - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

    - uses: ./.github/actions/cluster-name
      id: name
      with:
        arch: ${{ matrix.arch }}

    - uses: ./.github/actions/install-eksctl

    - name: Create Cluster
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        sed -e 's/\$NAME/${{ steps.name.outputs.NAME }}/' \
            -e 's/$K8S_VERSION/${{ matrix.k8s-version }}/' \
            .github/workflows/scale-config/${{ github.job }}/eks-x86-${{ matrix.arch }}.yml \
          | eksctl create cluster -f -

    - uses: ./.github/actions/install-linkerd
      with:
        version: ${{ matrix.linkerd-version }}

    - name: Install Emojivoto
      run: |
        linkerd inject https://run.linkerd.io/emojivoto.yml | kubectl apply -f -
        kubectl -n emojivoto scale --replicas 0 deploy vote-bot
        kubectl -n emojivoto patch deployment web --type=json \
          -p='[{"op": "add", "path": "/spec/template/spec/tolerations", "value": [{"key":"SUT","operator":"Equal","value":"true","effect":"NoSchedule"}]}]'
        linkerd check --proxy -n emojivoto

    - uses: ./.github/actions/run-k6-test
      with:
        initial-delay: ${{ matrix.initial-delay }}
        parallelism: ${{ matrix.k6-parallelism }}

    - uses: ./.github/actions/retrieve-metrics
      with:
        platform: ${{ matrix.platform }}
        arch: ${{ matrix.arch }}
        k8s-version: ${{ matrix.k8s-version }}

    - name: Tear Down Cluster
      # If shutdown is false, make sure you manually delete the clusters and
      # its related resources after you're done inspecting them!
      if: ${{ always() }}
      run: |
        if [[ ${{ matrix.shutdown }} == "true" ]]; then
          eksctl delete cluster --name ${{ steps.name.outputs.NAME }}
        fi
